model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

//******************************************************
model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  role  Role   @default(USER)
  posts Post[]
}

model Post {
  id       Int    @id @default(autoincrement())
  title    String
  // поле отношения                            скалярное ПО
  author   User   @relation(fields: [authorId], references: [id])
  //"Фактическое" (скалярное) ПО (хранит внешний ключ)
  authorId Int // relation scalar field (used in the `@relation` attribute above)
}

//******************************************************

Сторона отношения, которая помечена @relation атрибутом, представляет сторону, которая хранит внешний ключ в базовой базе данных.
"Фактическое" поле, представляющее внешний ключ, также требуется на этой стороне отношения, оно называется скалярным полем отношения
и на него есть ссылка внутри @relation атрибута:

author     User    @relation(fields: [authorId], references: [id])
authorId   Int
Скалярное поле становится скалярным полем отношения, когда оно используется в fields качестве @relation атрибута.

Соглашения об именовании скалярных отношений

Поскольку скалярное поле отношения всегда принадлежит полю отношения, общим является следующее соглашение об именовании:
Поле отношений: author
Скалярное поле отношения: authorId (имя поля отношения + Id)

@relation  Атрибут может быть применен только к полям отношений, но не к скалярным полям.

@relation Атрибут необходим, когда:
вы определяете отношение "один к одному" или "один ко многим", оно требуется на одной стороне отношения (с соответствующим скалярным полем отношения)
вы определяете отношение "один к одному" или "один ко многим", оно требуется на одной стороне отношения (с соответствующим скалярным полем отношения)
вам нужно устранить неоднозначность отношения (это, например, случай, когда у вас есть два отношения между одними и теми же моделями)
вы определяете самоотношение
вы определяете отношение "многие ко многим" для MongoDB
вам необходимо управлять тем, как таблица отношений представлена в базовой базе данных (например, использовать определенное имя для таблицы отношений)
Примечание: Неявные отношения "многие ко многим" в реляционных базах данных не требуют @relation атрибута.

//******************************************************
Чтобы устранить неоднозначность этих отношений, вам необходимо снабдить поля отношений @relation атрибутом и предоставить name аргумент.
Вы можете задать любые name (за исключением пустой строки ""), но они должны быть одинаковыми с обеих сторон отношения:

Для устранения неодонозначности отношений в примере указаны
"WrittenPosts" и "PinnedPost" - аргументы name атрибута @relation

model User {
  id           Int     @id @default(autoincrement())
  name         String?
  writtenPosts Post[]  @relation("WrittenPosts")
  pinnedPost   Post?   @relation("PinnedPost")
}

model Post {
  id         Int     @id @default(autoincrement())
  title      String?
  author     User    @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId   Int
  pinnedBy   User?   @relation("PinnedPost", fields: [pinnedById], references: [id])
  pinnedById Int?    @unique
}

//******************************************************
@@id

Определяет многополевой идентификатор (составной идентификатор) модели.

Имя fields аргумента в @@id атрибуте может быть опущено:
@@id(fields: [title, author])
@@id([title, author])

@@id([firstName, lastName, isAdmin])
Теперь при создании новых User записей необходимо предоставлять уникальную комбинацию значений
для firstName, lastName и isAdmin:

//******************************************************
One-to-many

Отношения "Один ко многим" (1-n) относятся к отношениям, в которых одна запись на одной стороне отношения может быть связана с нулем или более записей на другой стороне.
В следующем примере существует отношение "один ко многим" между моделями и User:Post

model User {
  id    Int    @id @default(autoincrement())
  posts Post[]
}

model Post {
  id       Int  @id @default(autoincrement())
  author   User @relation(fields: [authorId], references: [id])
  authorId Int
}

One-to-one
Отношения "один к одному" (1-1) относятся к отношениям,
в которых не более одной записи может быть связано с обеих сторон отношения.
"Один к одному" это вид отношений между полями,
хранящими уникальные значения.
Поля, объявленные с директировой @id является уникальными.

Если добавить UNIQUE ограничение на внешний ключ authorId в приведённом выше примере, то отношение можно получить отношение "Один к одному".
Если бы это UNIQUE ограничение отсутствовало, отношение считалось бы отношением 1-n.
//******************************************************

Сторона списка отношения 1-n всегда обязательна.
С другой стороны отношения, поле аннотированного отношения и скаляр отношения могут либо оба быть необязательными, либо оба быть обязательными.
// Необязательные поля отношения и скаляр
author   User? @relation(fields: [authorId], references: [id])
authorId Int?

// Обязательные поля отношения и скаляр
author   User @relation(fields: [authorId], references: [id])
authorId Int

Many-to-many
Отношения "многие ко многим" (m-n) относятся к отношениям, в которых ноль или более записей на одной стороне отношения могут быть связаны с нулем или более записей на другой стороне.
m-n-отношения могут быть как явными, так и неявными в схеме Prisma.
Мы рекомендуем использовать неявные m-n-отношения, если вам не нужно хранить какие-либо дополнительные метаданные в самой таблице отношений.
Вы всегда можете перейти к явному m-n-отношению позже, если это необходимо.

//******************************************************
explicit m-n-relation

Явные отношения "многие ко многим"

Используются, если нужно хранить какие-либо дополнительные метаданные в самой таблице отношений.
При явном соотношении m-n таблица отношений представлена в виде модели в схеме Prisma и может использоваться в запросах.
Явные отношения m-n определяют три модели:

Две модели с отношением m-n, такие как Category и Post.
Одна модель, которая представляет таблицу отношений, такую CategoriesOnPosts как (также иногда называемую JOIN, link или сводной, в базовой базе данных).
Действуют те же правила, что и для отношений 1-n.
Поскольку Post↔ CategoriesOnPosts и Category ↔ CategoriesOnPosts оба фактически являются отношениями 1-n.
Это означает, что одна сторона отношения должна быть помечена @relation атрибутом.

model Post {
  id         Int                 @id @default(autoincrement())
  title      String
  categories CategoriesOnPosts[]
}

model Category {
  id    Int                 @id @default(autoincrement())
  name  String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
}

Все методы клиента Prisma возвращают экземпляр PrismaPromise.
который выполняется только при вызове await or .then() или .catch()

create:           создаёт записи
connect:          связывает создаваемые записи с существующими в других моделях
connectOrCreate: where, create   связывает создаваемые записи с существующими в других моделях, или создаёт в них новые записи, если они ещё не существуют
where: some:{условие1, ..., условиеn}   хотя бы одно из условий
where: {условие1, ..., условиеn}        все условия одновременно

//******************************************************

implicit m-n-relations

Невные отношения "многие ко многим"
Неявные отношения m-n определяют поля отношений в виде списков на обеих сторонах отношения.
Хотя таблица отношений существует в базовой базе данных, она управляется Prisma и не отображается в схеме Prisma.
Таблицы неявных отношений следуют определенному соглашению.

Неявные m-n-отношения немного упрощают Prisma Client API для m-n-отношений
(поскольку у вас на один уровень вложенности меньше внутри вложенных записей).
Используются, если не нужно хранить какие-либо дополнительные метаданные в самой таблице отношений.

Если вы не используете Prisma Migrate, а получаете свою модель данных из самоанализа,
вы все равно можете использовать неявные m-n-отношения, следуя соглашениям Prisma для таблиц отношений.

Пример ннеявного m-n-отношения между Post и Category:
model Post {
  id         Int        @id @default(autoincrement())
  title      String
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

Запросы неявного отношения m-n требуют меньшей вложенности, чем явные m-n запросы.

Создает одну Post и несколько Category записей:
categories: {
create: [{ name: 'Magic' }, { name: 'Butterflies' }],
},

.findMany({
  include: {
      categories: true,
},

//******************************************************

Правила для определения неявного отношения m-n
Неявные отношения m-n:

! Если вы переименовываете поля отношений в неявных самоотношениях "многие ко многим",
убедитесь, что вы сохраняете алфавитный порядок полей - например, добавляя префиксы с a_ и _b.

Используйте определенное соглашение для таблиц отношений
Не требуйте @relation атрибута, если только вам не нужно устранить неоднозначность отношений с помощью имени, например, @relation("MyRelation") или @relation(name: "MyRelation").
Если вы используете @relation атрибут, вы не можете использовать аргументы references, fields onUpdate или onDelete.
Это потому, что они принимают фиксированное значение для неявных m-n-отношений и не могут быть изменены.
Требуют, чтобы обе модели имели единую @id. Имейте в виду, что:
Вы не можете использовать многополевой идентификатор
Вы не можете использовать @unique вместо @id

Имейте в виду, что:
Вы не можете использовать многополевой идентификатор
Вы не можете использовать @unique вместо @id
//******************************************************

Соглашения для таблиц отношений в неявных m-n отношениях

Если вы получаете свою модель данных из самоанализа,
вы все равно можете использовать неявные m-n-отношения,
следуя соглашениям Prisma для таблиц отношений.
В следующем примере предполагается, что вы хотите создать таблицу отношений,
чтобы получить неявное m-n-отношение для двух моделей, называемых Post и Category.

Имена таблиц
Если вы хотите, чтобы таблица отношений отображалась в процессе самоанализа как неявное m-n-отношение,
имя должно точно соответствовать этой структуре:

Оно должно начинаться с подчеркивания _
Затем название первой таблицы в алфавитном порядке (в данном случае Category)
Затем To
Затем название второй таблицы в алфавитном порядке (в данном случае Post)
В приведенном примере правильное имя таблицы - _CategoryToPost.

Столбцы
Таблица отношений для неявного m-n-отношения должна содержать ровно два столбца:
Столбец внешнего ключа, который указывает на Category вызываемый A
Столбец внешнего ключа, который указывает на Post вызываемый B
Столбцы должны называться A и B,
где A указывается модель, которая идет первой в алфавите,
и B указывает на модель, которая идет последней в алфавите.

Индексы
Далее должны быть:
Уникальный индекс, определенный в обоих столбцах внешнего ключа:
Неуникальный индекс, определенный на B:
//******************************************************

Настройка имени таблицы отношений в неявных отношениях "многие ко многим"
При использовании Prisma Migrate вы можете настроить имя таблицы отношений,
которой управляет Prisma, используя @relation атрибут.
Например, если вы хотите, чтобы таблица отношений вызывалась _MyRelationTable
вместо имени по умолчанию _CategoryToPost, вы можете указать его следующим образом:

model Post {
id         Int        @id @default(autoincrement())
categories Category[] @relation("MyRelationTable")
}

model Category {
id    Int    @id @default(autoincrement())
posts Post[] @relation("MyRelationTable")
}
//******************************************************

Таблицы отношений
Таблица отношений (также иногда называемая таблицей СОЕДИНЕНИЯ, ссылки или сводной таблицей)
соединяет две или более других таблиц и, следовательно, создает отношение между ними.
Создание таблиц отношений - обычная практика моделирования данных в SQL для представления отношений между различными объектами.
По сути, это означает, что "одно отношение m-n моделируется как два отношения 1-n в базе данных".

Мы рекомендуем использовать неявные m-n-отношения,
где Prisma автоматически генерирует таблицу отношений в базовой базе данных.
Явные m-n-отношения следует использовать,
когда вам нужно сохранить дополнительные данные в отношениях,
такие как дата создания отношения.


//******************************************************
Prisma поддерживает самоотношения следующих видов:
"один к одному"
"один ко многим"
"многие ко многим"

Пример нескольких самоотношений в одной модели

model User {
id         Int     @id @default(autoincrement())
name       String?
teacherId  Int?
teacher    User?   @relation("TeacherStudents", fields: [teacherId], references: [id])
students   User[]  @relation("TeacherStudents")
followedBy User[]  @relation("UserFollows")
following  User[]  @relation("UserFollows")
}

//******************************************************
Переименование полей и моделей в клиентском API Prisma

Вы можете "переименовывать" поля и модели, которые используются в Prisma Client,
сопоставляя их с "оригинальными" именами в базе данных,
используя атрибуты @map и @@map.

model Category {
id                 Int                @id @default(autoincrement()) @map("category_id")
name               String?            @db.VarChar(256)
post_in_categories PostInCategories[]

@@map("categories")
}

model PostInCategories {
post_id     Int
category_id Int
categories  Category @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
posts       Post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

@@unique([post_id, category_id], map: "post_id_category_id_unique")
@@map("post_in_categories")
}

//******************************************************
Prisma поддерживает следующие ссылочные действия:

Cascade
Restrict
NoAction
SetNull
SetDefault

Если вы не укажете ссылочное действие,
Prisma использует следующие значения по умолчанию:

Пункт	    Необязательные отношения	  Обязательные отношения
onDelete	      SetNull	                    Restrict
onUpdate	      Cascade	                    Cascade

//******************************************************

Introspection

Рабочий процесс самоанализа
Типичный рабочий процесс для проектов, которые не используют Prisma Migrate,
а вместо этого используют обычный SQL или другой инструмент миграции, выглядит следующим образом:

Измените схему базы данных (например, используя обычный SQL)
Запустите prisma db pull, чтобы обновить схему Prisma
Запустите prisma generate для обновления клиента Prisma
Используйте обновленный клиент Prisma в своем приложении
Обратите внимание, что по мере разработки приложения этот процесс может повторяться неопределенное количество раз.
//******************************************************
Prisma Studio

Prisma Studio - это визуальный редактор данных в вашей базе данных.

npx prisma studio .
//******************************************************